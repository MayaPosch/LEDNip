#
# This is the config file for the LEDNip v0.1 Cortex-M4 board with one STM32F427VGT6 chip.
# Board documentation: http://www.nyantronics.com/
# Microcontroller: https://www.st.com/resource/en/datasheet/stm32f427vg.pdf
# FT2232H debug adapter:  
#	https://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf
# 	BDBUS0:TCK - BDBUS1:TDI - BDBUS2:TDO - BDBUS3:TMS - BDBUS4:TRST
# 

# as of OpenOCD rev. 0.10.0, ft2232 is merged into interface ftdi
interface ftdi

# FT2232H default VID and PID
# if multiple devices are present, use ftdi_device_desc, ftdi_serial or ftdi_location to uniquely identify one.
ftdi_vid_pid 0x0403 0x6010

# FT2232H has two 16 bit channels. Use the second one (the other should be supported as well).
ftdi_channel 1

# Select mode MPSSE JTAG, set every pin high impedance except TCK, TDI, TMS. 
ftdi_layout_init 0x0008 0x000b
# JTAG transport should be default but let's be explicit.
transport select jtag

# configure BDBUS4: nTRST open drain.
ftdi_layout_signal nTRST -data 0x0010 -oe 0x0010
reset_config trst_only trst_open_drain

# target device is an STM32F427 covered by the family target config.
source [find target/stm32f4x.cfg]
adapter_khz 1000

# Assume SRST is unavailable, so we might need to assert reset ourselves, 
# which may imply triggering a software reset by setting AIRCR VECTKEY 0x05FA and SYSRESETREQ 1.
# The actual reset would look something like:
# $_TARGETNAME configure -event reset-assert "$_TARGETNAME mww phys 0xE000ED0C 0x05FA0004"
# However, "cortex_m reset_config sysresetreq" is already included in stm32f4x.cfg and used with ft2232.
#
# So in conclusion, 1) OpenOCD comes with proper built-in reset handling for Cortex-M controllers and 
# 2) even though the OpenOCD Config File Guidelines misleadingly suggest it, just use the appropriate 
#    ready-made target config (here: stm32f4x.cfg) and adequate halting and reset handling will be covered.
# 3) The major part of a custom config file concerns the debug adapter setup, transport and associated wiring. 
